// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:clock_challenge/model/location_response_entity.dart';
import 'package:clock_challenge/generated/json/location_response_entity_helper.dart';
import 'package:clock_challenge/model/weather_three_days_response_entity.dart';
import 'package:clock_challenge/generated/json/weather_three_days_response_entity_helper.dart';
import 'package:clock_challenge/model/weather_hourly_response_entity.dart';
import 'package:clock_challenge/generated/json/weather_hourly_response_entity_helper.dart';
import 'package:clock_challenge/model/weather_entity.dart';
import 'package:clock_challenge/generated/json/weather_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case LocationResponse:
        return locationResponseFromJson(data as LocationResponse, json) as T;
      case Location:
        return locationFromJson(data as Location, json) as T;
      case LocationResponseRefer:
        return locationResponseReferFromJson(
            data as LocationResponseRefer, json) as T;
      case WeatherThreeDaysResponse:
        return WeatherThreeDaysResponseFromJson(
            data as WeatherThreeDaysResponse, json) as T;
      case WeatherThreeDays:
        return WeatherThreeDaysFromJson(data as WeatherThreeDays, json) as T;
      case WeatherThreeDaysResponseRefer:
        return weatherThreeDaysResponseReferFromJson(
            data as WeatherThreeDaysResponseRefer, json) as T;
      case WeatherHourlyResponse:
        return WeatherHourlyResponseFromJson(
            data as WeatherHourlyResponse, json) as T;
      case WeatherHourly:
        return WeatherHourlyFromJson(data as WeatherHourly, json) as T;
      case WeatherHourlyResponseRefer:
        return weatherHourlyResponseReferFromJson(
            data as WeatherHourlyResponseRefer, json) as T;
      case WeatherResponse:
        return weatherResponseFromJson(data as WeatherResponse, json) as T;
      case WeatherNow:
        return weatherNowFromJson(data as WeatherNow, json) as T;
      case WeatherRefer:
        return weatherReferFromJson(data as WeatherRefer, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case LocationResponse:
        return locationResponseToJson(data as LocationResponse);
      case Location:
        return locationToJson(data as Location);
      case LocationResponseRefer:
        return locationResponseReferToJson(data as LocationResponseRefer);
      case WeatherThreeDaysResponse:
        return WeatherThreeDaysResponseToJson(data as WeatherThreeDaysResponse);
      case WeatherThreeDays:
        return WeatherThreeDaysToJson(data as WeatherThreeDays);
      case WeatherThreeDaysResponseRefer:
        return weatherThreeDaysResponseReferToJson(
            data as WeatherThreeDaysResponseRefer);
      case WeatherHourlyResponse:
        return WeatherHourlyResponseToJson(data as WeatherHourlyResponse);
      case WeatherHourly:
        return WeatherHourlyToJson(data as WeatherHourly);
      case WeatherHourlyResponseRefer:
        return weatherHourlyResponseReferToJson(
            data as WeatherHourlyResponseRefer);
      case WeatherResponse:
        return weatherResponseToJson(data as WeatherResponse);
      case WeatherNow:
        return weatherNowToJson(data as WeatherNow);
      case WeatherRefer:
        return weatherReferToJson(data as WeatherRefer);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'LocationResponse':
        return LocationResponse().fromJson(json);
      case 'Location':
        return Location().fromJson(json);
      case 'LocationResponseRefer':
        return LocationResponseRefer().fromJson(json);
      case 'WeatherThreeDaysResponse':
        return WeatherThreeDaysResponse().fromJson(json);
      case 'WeatherThreeDays':
        return WeatherThreeDays().fromJson(json);
      case 'WeatherThreeDaysResponseRefer':
        return WeatherThreeDaysResponseRefer().fromJson(json);
      case 'WeatherHourlyResponse':
        return WeatherHourlyResponse().fromJson(json);
      case 'WeatherHourly':
        return WeatherHourly().fromJson(json);
      case 'WeatherHourlyResponseRefer':
        return WeatherHourlyResponseRefer().fromJson(json);
      case 'WeatherResponse':
        return WeatherResponse().fromJson(json);
      case 'WeatherNow':
        return WeatherNow().fromJson(json);
      case 'WeatherRefer':
        return WeatherRefer().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'LocationResponse':
        return List<LocationResponse>();
      case 'Location':
        return List<Location>();
      case 'LocationResponseRefer':
        return List<LocationResponseRefer>();
      case 'WeatherThreeDaysResponse':
        return List<WeatherThreeDaysResponse>();
      case 'WeatherThreeDays':
        return List<WeatherThreeDays>();
      case 'WeatherThreeDaysResponseRefer':
        return List<WeatherThreeDaysResponseRefer>();
      case 'WeatherHourlyResponse':
        return List<WeatherHourlyResponse>();
      case 'WeatherHourly':
        return List<WeatherHourly>();
      case 'WeatherHourlyResponseRefer':
        return List<WeatherHourlyResponseRefer>();
      case 'WeatherResponse':
        return List<WeatherResponse>();
      case 'WeatherNow':
        return List<WeatherNow>();
      case 'WeatherRefer':
        return List<WeatherRefer>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
